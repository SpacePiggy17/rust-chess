# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class Board:
    r"""
    Board class
    """
    halfmove_clock: builtins.int
    fullmove_number: builtins.int
    def __new__(cls, fen:typing.Optional[builtins.str]=None) -> Board:
        r"""
        Create a new board from a FEN string, otherwise default to the starting position
        """
    def get_fen(self) -> builtins.str:
        r"""
        Get the FEN string representation of the board
        """
    def __str__(self) -> builtins.str:
        r"""
        Get the FEN string representation of the board
        """
    @staticmethod
    def from_fen(fen:builtins.str) -> Board:
        r"""
        Create a new board from a FEN string
        """
    def is_fifty_moves(self) -> builtins.bool:
        r"""
        Checks if the halfmoves since the last pawn move or capture is >= 100
        and the game is ongoing (not checkmate or stalemate)
        """
    def is_check(self) -> builtins.bool:
        r"""
        Checks if the side to move is in check
        """

class Color:
    r"""
    Color enum
    """
    def __str__(self) -> builtins.str:
        r"""
        Get the color as a string
        """
    def __repr__(self) -> builtins.str:
        r"""
        Get the color as a bool string
        """

class Move:
    r"""
    Move class
    """
    source: Square
    r"""
    Get the source square of the move
    """
    dest: Square
    r"""
    Get the destination square of the move
    """
    promotion: typing.Optional[Piece]
    r"""
    Get the promotion piece of the move
    """
    def __new__(cls, source:Square, dest:Square, promotion:typing.Optional[Piece]=None) -> Move:
        r"""
        Create a new move from a source square, destination square, and optional promotion piece
        """
    @staticmethod
    def from_uci(uci:builtins.str) -> Move:
        r"""
        Create a new move from a UCI string (e.g. "e2e4")
        """
    def get_uci(self) -> builtins.str:
        r"""
        Get the UCI string representation of the move (e.g. "e2e4")
        """
    def __str__(self) -> builtins.str:
        r"""
        Get the UCI string representation of the move (e.g. "e2e4")
        """
    def __repr__(self) -> builtins.str:
        r"""
        Get the debug representation of the move (e.g. "Move(e2, e4, None)")
        """

class Piece:
    r"""
    Piece enum
    """
    def get_index(self) -> builtins.int:
        r"""
        Get the index of the piece (0-5)
        """
    def to_string(self) -> builtins.str: ...
    def __str__(self) -> builtins.str:
        r"""
        Convert the piece to a string
        """
    def __repr__(self) -> builtins.str:
        r"""
        Convert the piece to a string
        """

class Square:
    r"""
    Square class
    """
    def __new__(cls, square:typing.Any) -> Square:
        r"""
        Creates a new square from an integer (0-63) or a string (e.g. "e4")
        """
    def get_index(self) -> builtins.int:
        r"""
        Get the index of the square (0-63)
        """
    @staticmethod
    def from_index(index:builtins.int) -> Square:
        r"""
        Create a new square from an index
        """
    @staticmethod
    def from_rank_file(rank:builtins.int, file:builtins.int) -> Square:
        r"""
        Create a new square from a rank and file
        """
    def get_name(self) -> builtins.str:
        r"""
        Get the name of the square (e.g. "e4")
        """
    def __str__(self) -> builtins.str:
        r"""
        Get the name of the square (e.g. "e4")
        """
    def __repr__(self) -> builtins.str:
        r"""
        Get the name of the square (e.g. "e4")
        """
    @staticmethod
    def from_name(square_name:builtins.str) -> Square:
        r"""
        Create a new square from the name (e.g. "e4")
        """
    def get_rank(self) -> builtins.int:
        r"""
        Get the rank of the square (0-7)
        """
    def get_file(self) -> builtins.int:
        r"""
        Get the file of the square (0-7)
        """
    def up(self) -> typing.Optional[Square]:
        r"""
        Returns the square above, otherwise None
        """
    def down(self) -> typing.Optional[Square]:
        r"""
        Returns the square below, otherwise None
        """
    def left(self) -> typing.Optional[Square]:
        r"""
        Returns the square to the left, otherwise None
        """
    def right(self) -> typing.Optional[Square]:
        r"""
        Returns the square to the right, otherwise None
        """

